// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v3.6.1
// source: Automate.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceState_Type int32

const (
	DeviceState_Power      DeviceState_Type = 0
	DeviceState_Brightness DeviceState_Type = 1
	// Color = 2;
	DeviceState_ColorTemperature DeviceState_Type = 3
)

// Enum value maps for DeviceState_Type.
var (
	DeviceState_Type_name = map[int32]string{
		0: "Power",
		1: "Brightness",
		3: "ColorTemperature",
	}
	DeviceState_Type_value = map[string]int32{
		"Power":            0,
		"Brightness":       1,
		"ColorTemperature": 3,
	}
)

func (x DeviceState_Type) Enum() *DeviceState_Type {
	p := new(DeviceState_Type)
	*p = x
	return p
}

func (x DeviceState_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceState_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_Automate_proto_enumTypes[0].Descriptor()
}

func (DeviceState_Type) Type() protoreflect.EnumType {
	return &file_Automate_proto_enumTypes[0]
}

func (x DeviceState_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceState_Type.Descriptor instead.
func (DeviceState_Type) EnumDescriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{2, 0}
}

type BinaryOperator_Operation int32

const (
	// nums
	BinaryOperator_ADD BinaryOperator_Operation = 0
	BinaryOperator_SUB BinaryOperator_Operation = 1
	BinaryOperator_MUL BinaryOperator_Operation = 2
	BinaryOperator_DIV BinaryOperator_Operation = 3
	BinaryOperator_MIN BinaryOperator_Operation = 7
	BinaryOperator_MAX BinaryOperator_Operation = 8
	// int+bool
	BinaryOperator_OR  BinaryOperator_Operation = 4
	BinaryOperator_AND BinaryOperator_Operation = 5
	BinaryOperator_XOR BinaryOperator_Operation = 6
)

// Enum value maps for BinaryOperator_Operation.
var (
	BinaryOperator_Operation_name = map[int32]string{
		0: "ADD",
		1: "SUB",
		2: "MUL",
		3: "DIV",
		7: "MIN",
		8: "MAX",
		4: "OR",
		5: "AND",
		6: "XOR",
	}
	BinaryOperator_Operation_value = map[string]int32{
		"ADD": 0,
		"SUB": 1,
		"MUL": 2,
		"DIV": 3,
		"MIN": 7,
		"MAX": 8,
		"OR":  4,
		"AND": 5,
		"XOR": 6,
	}
)

func (x BinaryOperator_Operation) Enum() *BinaryOperator_Operation {
	p := new(BinaryOperator_Operation)
	*p = x
	return p
}

func (x BinaryOperator_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryOperator_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_Automate_proto_enumTypes[1].Descriptor()
}

func (BinaryOperator_Operation) Type() protoreflect.EnumType {
	return &file_Automate_proto_enumTypes[1]
}

func (x BinaryOperator_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryOperator_Operation.Descriptor instead.
func (BinaryOperator_Operation) EnumDescriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{5, 0}
}

type UnaryOperator_Operator int32

const (
	// num
	UnaryOperator_NEG UnaryOperator_Operator = 0
	// c-style cast (only supports int,float,bool)
	UnaryOperator_CAST_BOOL  UnaryOperator_Operator = 1
	UnaryOperator_CAST_INT   UnaryOperator_Operator = 2
	UnaryOperator_CAST_FLOAT UnaryOperator_Operator = 3
	// bool
	UnaryOperator_NOT UnaryOperator_Operator = 4
)

// Enum value maps for UnaryOperator_Operator.
var (
	UnaryOperator_Operator_name = map[int32]string{
		0: "NEG",
		1: "CAST_BOOL",
		2: "CAST_INT",
		3: "CAST_FLOAT",
		4: "NOT",
	}
	UnaryOperator_Operator_value = map[string]int32{
		"NEG":        0,
		"CAST_BOOL":  1,
		"CAST_INT":   2,
		"CAST_FLOAT": 3,
		"NOT":        4,
	}
)

func (x UnaryOperator_Operator) Enum() *UnaryOperator_Operator {
	p := new(UnaryOperator_Operator)
	*p = x
	return p
}

func (x UnaryOperator_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnaryOperator_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_Automate_proto_enumTypes[2].Descriptor()
}

func (UnaryOperator_Operator) Type() protoreflect.EnumType {
	return &file_Automate_proto_enumTypes[2]
}

func (x UnaryOperator_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnaryOperator_Operator.Descriptor instead.
func (UnaryOperator_Operator) EnumDescriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{6, 0}
}

type Comparison_Operator int32

const (
	Comparison_GT   Comparison_Operator = 0
	Comparison_LT   Comparison_Operator = 1
	Comparison_EQ   Comparison_Operator = 2
	Comparison_GTEQ Comparison_Operator = 3
	Comparison_LTEQ Comparison_Operator = 4
	Comparison_NEQ  Comparison_Operator = 5
)

// Enum value maps for Comparison_Operator.
var (
	Comparison_Operator_name = map[int32]string{
		0: "GT",
		1: "LT",
		2: "EQ",
		3: "GTEQ",
		4: "LTEQ",
		5: "NEQ",
	}
	Comparison_Operator_value = map[string]int32{
		"GT":   0,
		"LT":   1,
		"EQ":   2,
		"GTEQ": 3,
		"LTEQ": 4,
		"NEQ":  5,
	}
)

func (x Comparison_Operator) Enum() *Comparison_Operator {
	p := new(Comparison_Operator)
	*p = x
	return p
}

func (x Comparison_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparison_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_Automate_proto_enumTypes[3].Descriptor()
}

func (Comparison_Operator) Type() protoreflect.EnumType {
	return &file_Automate_proto_enumTypes[3]
}

func (x Comparison_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparison_Operator.Descriptor instead.
func (Comparison_Operator) EnumDescriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{7, 0}
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event []*Event `protobuf:"bytes,1,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{0}
}

func (x *Events) GetEvent() []*Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type DeviceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ident:
	//	*DeviceIdentifier_Name
	Ident isDeviceIdentifier_Ident `protobuf_oneof:"ident"`
}

func (x *DeviceIdentifier) Reset() {
	*x = DeviceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIdentifier) ProtoMessage() {}

func (x *DeviceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIdentifier.ProtoReflect.Descriptor instead.
func (*DeviceIdentifier) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{1}
}

func (m *DeviceIdentifier) GetIdent() isDeviceIdentifier_Ident {
	if m != nil {
		return m.Ident
	}
	return nil
}

func (x *DeviceIdentifier) GetName() string {
	if x, ok := x.GetIdent().(*DeviceIdentifier_Name); ok {
		return x.Name
	}
	return ""
}

type isDeviceIdentifier_Ident interface {
	isDeviceIdentifier_Ident()
}

type DeviceIdentifier_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

func (*DeviceIdentifier_Name) isDeviceIdentifier_Ident() {}

type DeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceIdentifier `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Type   DeviceState_Type  `protobuf:"varint,2,opt,name=type,proto3,enum=github.com.acarlson99.schedule.DeviceState_Type" json:"type,omitempty"`
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceState) GetDevice() *DeviceIdentifier {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceState) GetType() DeviceState_Type {
	if x != nil {
		return x.Type
	}
	return DeviceState_Power
}

type Primitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to V:
	//	*Primitive_Int32
	//	*Primitive_Float
	//	*Primitive_String_
	//	*Primitive_Bool
	V isPrimitive_V `protobuf_oneof:"v"`
}

func (x *Primitive) Reset() {
	*x = Primitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Primitive.ProtoReflect.Descriptor instead.
func (*Primitive) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{3}
}

func (m *Primitive) GetV() isPrimitive_V {
	if m != nil {
		return m.V
	}
	return nil
}

func (x *Primitive) GetInt32() int32 {
	if x, ok := x.GetV().(*Primitive_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *Primitive) GetFloat() float32 {
	if x, ok := x.GetV().(*Primitive_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Primitive) GetString_() string {
	if x, ok := x.GetV().(*Primitive_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Primitive) GetBool() bool {
	if x, ok := x.GetV().(*Primitive_Bool); ok {
		return x.Bool
	}
	return false
}

type isPrimitive_V interface {
	isPrimitive_V()
}

type Primitive_Int32 struct {
	Int32 int32 `protobuf:"varint,1,opt,name=int32,proto3,oneof"`
}

type Primitive_Float struct {
	Float float32 `protobuf:"fixed32,8,opt,name=float,proto3,oneof"`
}

type Primitive_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type Primitive_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

func (*Primitive_Int32) isPrimitive_V() {}

func (*Primitive_Float) isPrimitive_V() {}

func (*Primitive_String_) isPrimitive_V() {}

func (*Primitive_Bool) isPrimitive_V() {}

type Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to V:
	//	*Var_Prim
	//	*Var_DeviceState
	//	*Var_BinOp
	//	*Var_UnaryOp
	//	*Var_Cmp
	V isVar_V `protobuf_oneof:"v"`
}

func (x *Var) Reset() {
	*x = Var{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Var) ProtoMessage() {}

func (x *Var) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Var.ProtoReflect.Descriptor instead.
func (*Var) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{4}
}

func (m *Var) GetV() isVar_V {
	if m != nil {
		return m.V
	}
	return nil
}

func (x *Var) GetPrim() *Primitive {
	if x, ok := x.GetV().(*Var_Prim); ok {
		return x.Prim
	}
	return nil
}

func (x *Var) GetDeviceState() *DeviceState {
	if x, ok := x.GetV().(*Var_DeviceState); ok {
		return x.DeviceState
	}
	return nil
}

func (x *Var) GetBinOp() *BinaryOperator {
	if x, ok := x.GetV().(*Var_BinOp); ok {
		return x.BinOp
	}
	return nil
}

func (x *Var) GetUnaryOp() *UnaryOperator {
	if x, ok := x.GetV().(*Var_UnaryOp); ok {
		return x.UnaryOp
	}
	return nil
}

func (x *Var) GetCmp() *Comparison {
	if x, ok := x.GetV().(*Var_Cmp); ok {
		return x.Cmp
	}
	return nil
}

type isVar_V interface {
	isVar_V()
}

type Var_Prim struct {
	Prim *Primitive `protobuf:"bytes,1,opt,name=prim,proto3,oneof"`
}

type Var_DeviceState struct {
	// // primitives
	// int32 int32 = 1;
	// float float = 8;
	// string string = 2;
	// bool bool = 4;
	// advanced
	DeviceState *DeviceState `protobuf:"bytes,3,opt,name=device_state,json=deviceState,proto3,oneof"`
}

type Var_BinOp struct {
	BinOp *BinaryOperator `protobuf:"bytes,5,opt,name=bin_op,json=binOp,proto3,oneof"`
}

type Var_UnaryOp struct {
	UnaryOp *UnaryOperator `protobuf:"bytes,6,opt,name=unary_op,json=unaryOp,proto3,oneof"`
}

type Var_Cmp struct {
	Cmp *Comparison `protobuf:"bytes,7,opt,name=cmp,proto3,oneof"`
}

func (*Var_Prim) isVar_V() {}

func (*Var_DeviceState) isVar_V() {}

func (*Var_BinOp) isVar_V() {}

func (*Var_UnaryOp) isVar_V() {}

func (*Var_Cmp) isVar_V() {}

type BinaryOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op  BinaryOperator_Operation `protobuf:"varint,1,opt,name=op,proto3,enum=github.com.acarlson99.schedule.BinaryOperator_Operation" json:"op,omitempty"`
	Lhs *Var                     `protobuf:"bytes,2,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs *Var                     `protobuf:"bytes,3,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *BinaryOperator) Reset() {
	*x = BinaryOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryOperator) ProtoMessage() {}

func (x *BinaryOperator) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryOperator.ProtoReflect.Descriptor instead.
func (*BinaryOperator) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{5}
}

func (x *BinaryOperator) GetOp() BinaryOperator_Operation {
	if x != nil {
		return x.Op
	}
	return BinaryOperator_ADD
}

func (x *BinaryOperator) GetLhs() *Var {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *BinaryOperator) GetRhs() *Var {
	if x != nil {
		return x.Rhs
	}
	return nil
}

type UnaryOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op UnaryOperator_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=github.com.acarlson99.schedule.UnaryOperator_Operator" json:"op,omitempty"`
	X  *Var                   `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`
}

func (x *UnaryOperator) Reset() {
	*x = UnaryOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOperator) ProtoMessage() {}

func (x *UnaryOperator) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOperator.ProtoReflect.Descriptor instead.
func (*UnaryOperator) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{6}
}

func (x *UnaryOperator) GetOp() UnaryOperator_Operator {
	if x != nil {
		return x.Op
	}
	return UnaryOperator_NEG
}

func (x *UnaryOperator) GetX() *Var {
	if x != nil {
		return x.X
	}
	return nil
}

type Comparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op  Comparison_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=github.com.acarlson99.schedule.Comparison_Operator" json:"op,omitempty"`
	Lhs *Var                `protobuf:"bytes,2,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs *Var                `protobuf:"bytes,3,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *Comparison) Reset() {
	*x = Comparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comparison) ProtoMessage() {}

func (x *Comparison) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comparison.ProtoReflect.Descriptor instead.
func (*Comparison) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{7}
}

func (x *Comparison) GetOp() Comparison_Operator {
	if x != nil {
		return x.Op
	}
	return Comparison_GT
}

func (x *Comparison) GetLhs() *Var {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *Comparison) GetRhs() *Var {
	if x != nil {
		return x.Rhs
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Actions  []*Event_Action     `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
	Schedule []*Event_Schedule   `protobuf:"bytes,2,rep,name=schedule,proto3" json:"schedule,omitempty"`
	Devices  []*DeviceIdentifier `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`
	// setting many conditions results in
	// `and`ing them together
	StartIf []*Comparison `protobuf:"bytes,4,rep,name=start_if,json=startIf,proto3" json:"start_if,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{8}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetActions() []*Event_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Event) GetSchedule() []*Event_Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Event) GetDevices() []*DeviceIdentifier {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Event) GetStartIf() []*Comparison {
	if x != nil {
		return x.StartIf
	}
	return nil
}

type TimeOfDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`     // 0-23 24-hr time
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"` // 0-59
	Second int32 `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"` // 0-59
}

func (x *TimeOfDay) Reset() {
	*x = TimeOfDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeOfDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOfDay) ProtoMessage() {}

func (x *TimeOfDay) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOfDay.ProtoReflect.Descriptor instead.
func (*TimeOfDay) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{9}
}

func (x *TimeOfDay) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *TimeOfDay) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *TimeOfDay) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type Event_Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Start:
	//	*Event_Schedule_Daily
	//	*Event_Schedule_Crontab
	Start isEvent_Schedule_Start `protobuf_oneof:"start"`
}

func (x *Event_Schedule) Reset() {
	*x = Event_Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Schedule) ProtoMessage() {}

func (x *Event_Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Schedule.ProtoReflect.Descriptor instead.
func (*Event_Schedule) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{8, 0}
}

func (m *Event_Schedule) GetStart() isEvent_Schedule_Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (x *Event_Schedule) GetDaily() *TimeOfDay {
	if x, ok := x.GetStart().(*Event_Schedule_Daily); ok {
		return x.Daily
	}
	return nil
}

func (x *Event_Schedule) GetCrontab() string {
	if x, ok := x.GetStart().(*Event_Schedule_Crontab); ok {
		return x.Crontab
	}
	return ""
}

type isEvent_Schedule_Start interface {
	isEvent_Schedule_Start()
}

type Event_Schedule_Daily struct {
	Daily *TimeOfDay `protobuf:"bytes,1,opt,name=daily,proto3,oneof"`
}

type Event_Schedule_Crontab struct {
	Crontab string `protobuf:"bytes,2,opt,name=crontab,proto3,oneof"`
}

func (*Event_Schedule_Daily) isEvent_Schedule_Start() {}

func (*Event_Schedule_Crontab) isEvent_Schedule_Start() {}

type Event_Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R int32 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Event_Color) Reset() {
	*x = Event_Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Color) ProtoMessage() {}

func (x *Event_Color) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Color.ProtoReflect.Descriptor instead.
func (*Event_Color) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Event_Color) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Event_Color) GetG() int32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Event_Color) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type Event_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if `relative=false` then values are defined as absolute ranges
	// whose min/max vary by device
	// if `relative=true` then values are -100 - 100 where -100 would set the
	// state to 0% and 100 would set it to 100%. e.g. a relative decrease
	// of `brightness -10` would change a 80/100 brightness light to 70/100
	Relative bool `protobuf:"varint,10,opt,name=relative,proto3" json:"relative,omitempty"`
	// Types that are assignable to Action:
	//	*Event_Action_On
	//	*Event_Action_ColorTemp
	//	*Event_Action_Brightness
	Action isEvent_Action_Action `protobuf_oneof:"action"`
}

func (x *Event_Action) Reset() {
	*x = Event_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Automate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Action) ProtoMessage() {}

func (x *Event_Action) ProtoReflect() protoreflect.Message {
	mi := &file_Automate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Action.ProtoReflect.Descriptor instead.
func (*Event_Action) Descriptor() ([]byte, []int) {
	return file_Automate_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Event_Action) GetRelative() bool {
	if x != nil {
		return x.Relative
	}
	return false
}

func (m *Event_Action) GetAction() isEvent_Action_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Event_Action) GetOn() bool {
	if x, ok := x.GetAction().(*Event_Action_On); ok {
		return x.On
	}
	return false
}

func (x *Event_Action) GetColorTemp() int32 {
	if x, ok := x.GetAction().(*Event_Action_ColorTemp); ok {
		return x.ColorTemp
	}
	return 0
}

func (x *Event_Action) GetBrightness() int32 {
	if x, ok := x.GetAction().(*Event_Action_Brightness); ok {
		return x.Brightness
	}
	return 0
}

type isEvent_Action_Action interface {
	isEvent_Action_Action()
}

type Event_Action_On struct {
	On bool `protobuf:"varint,11,opt,name=on,proto3,oneof"`
}

type Event_Action_ColorTemp struct {
	// Color color = 12;
	ColorTemp int32 `protobuf:"varint,13,opt,name=color_temp,json=colorTemp,proto3,oneof"`
}

type Event_Action_Brightness struct {
	// brightness of 0 also attempts to power off device
	Brightness int32 `protobuf:"varint,14,opt,name=brightness,proto3,oneof"`
}

func (*Event_Action_On) isEvent_Action_Action() {}

func (*Event_Action_ColorTemp) isEvent_Action_Action() {}

func (*Event_Action_Brightness) isEvent_Action_Action() {}

var File_Automate_proto protoreflect.FileDescriptor

var file_Automate_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61,
	0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x45, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39,
	0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e,
	0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x42, 0x03, 0x0a, 0x01, 0x76, 0x22, 0xf2, 0x02, 0x0a, 0x03, 0x56, 0x61, 0x72, 0x12, 0x3f, 0x0a,
	0x04, 0x70, 0x72, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f,
	0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6d, 0x12, 0x50,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x47, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63,
	0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x69, 0x6e, 0x4f, 0x70, 0x12, 0x4a, 0x0a, 0x08, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f,
	0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e,
	0x61, 0x72, 0x79, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x03, 0x63, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x63, 0x6d, 0x70, 0x42, 0x03, 0x0a, 0x01, 0x76, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39,
	0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x35,
	0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f,
	0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x52, 0x03, 0x72, 0x68, 0x73, 0x22, 0x5b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x55, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x49, 0x56, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x07, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4f, 0x52,
	0x10, 0x06, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63,
	0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x01, 0x78, 0x22,
	0x49, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x35,
	0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f,
	0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x03, 0x72, 0x68, 0x73, 0x22, 0x3f, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x54, 0x45, 0x51, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x54,
	0x45, 0x51, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x05, 0x22, 0xef, 0x04,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73,
	0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x4a, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63,
	0x61, 0x72, 0x6c, 0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c,
	0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x66, 0x1a, 0x72, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x61, 0x72, 0x6c,
	0x73, 0x6f, 0x6e, 0x39, 0x39, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42, 0x07, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62, 0x1a, 0x83, 0x01, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x10, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4f, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Automate_proto_rawDescOnce sync.Once
	file_Automate_proto_rawDescData = file_Automate_proto_rawDesc
)

func file_Automate_proto_rawDescGZIP() []byte {
	file_Automate_proto_rawDescOnce.Do(func() {
		file_Automate_proto_rawDescData = protoimpl.X.CompressGZIP(file_Automate_proto_rawDescData)
	})
	return file_Automate_proto_rawDescData
}

var file_Automate_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_Automate_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Automate_proto_goTypes = []interface{}{
	(DeviceState_Type)(0),         // 0: github.com.acarlson99.schedule.DeviceState.Type
	(BinaryOperator_Operation)(0), // 1: github.com.acarlson99.schedule.BinaryOperator.Operation
	(UnaryOperator_Operator)(0),   // 2: github.com.acarlson99.schedule.UnaryOperator.Operator
	(Comparison_Operator)(0),      // 3: github.com.acarlson99.schedule.Comparison.Operator
	(*Events)(nil),                // 4: github.com.acarlson99.schedule.Events
	(*DeviceIdentifier)(nil),      // 5: github.com.acarlson99.schedule.DeviceIdentifier
	(*DeviceState)(nil),           // 6: github.com.acarlson99.schedule.DeviceState
	(*Primitive)(nil),             // 7: github.com.acarlson99.schedule.Primitive
	(*Var)(nil),                   // 8: github.com.acarlson99.schedule.Var
	(*BinaryOperator)(nil),        // 9: github.com.acarlson99.schedule.BinaryOperator
	(*UnaryOperator)(nil),         // 10: github.com.acarlson99.schedule.UnaryOperator
	(*Comparison)(nil),            // 11: github.com.acarlson99.schedule.Comparison
	(*Event)(nil),                 // 12: github.com.acarlson99.schedule.Event
	(*TimeOfDay)(nil),             // 13: github.com.acarlson99.schedule.TimeOfDay
	(*Event_Schedule)(nil),        // 14: github.com.acarlson99.schedule.Event.Schedule
	(*Event_Color)(nil),           // 15: github.com.acarlson99.schedule.Event.Color
	(*Event_Action)(nil),          // 16: github.com.acarlson99.schedule.Event.Action
}
var file_Automate_proto_depIdxs = []int32{
	12, // 0: github.com.acarlson99.schedule.Events.event:type_name -> github.com.acarlson99.schedule.Event
	5,  // 1: github.com.acarlson99.schedule.DeviceState.device:type_name -> github.com.acarlson99.schedule.DeviceIdentifier
	0,  // 2: github.com.acarlson99.schedule.DeviceState.type:type_name -> github.com.acarlson99.schedule.DeviceState.Type
	7,  // 3: github.com.acarlson99.schedule.Var.prim:type_name -> github.com.acarlson99.schedule.Primitive
	6,  // 4: github.com.acarlson99.schedule.Var.device_state:type_name -> github.com.acarlson99.schedule.DeviceState
	9,  // 5: github.com.acarlson99.schedule.Var.bin_op:type_name -> github.com.acarlson99.schedule.BinaryOperator
	10, // 6: github.com.acarlson99.schedule.Var.unary_op:type_name -> github.com.acarlson99.schedule.UnaryOperator
	11, // 7: github.com.acarlson99.schedule.Var.cmp:type_name -> github.com.acarlson99.schedule.Comparison
	1,  // 8: github.com.acarlson99.schedule.BinaryOperator.op:type_name -> github.com.acarlson99.schedule.BinaryOperator.Operation
	8,  // 9: github.com.acarlson99.schedule.BinaryOperator.lhs:type_name -> github.com.acarlson99.schedule.Var
	8,  // 10: github.com.acarlson99.schedule.BinaryOperator.rhs:type_name -> github.com.acarlson99.schedule.Var
	2,  // 11: github.com.acarlson99.schedule.UnaryOperator.op:type_name -> github.com.acarlson99.schedule.UnaryOperator.Operator
	8,  // 12: github.com.acarlson99.schedule.UnaryOperator.x:type_name -> github.com.acarlson99.schedule.Var
	3,  // 13: github.com.acarlson99.schedule.Comparison.op:type_name -> github.com.acarlson99.schedule.Comparison.Operator
	8,  // 14: github.com.acarlson99.schedule.Comparison.lhs:type_name -> github.com.acarlson99.schedule.Var
	8,  // 15: github.com.acarlson99.schedule.Comparison.rhs:type_name -> github.com.acarlson99.schedule.Var
	16, // 16: github.com.acarlson99.schedule.Event.actions:type_name -> github.com.acarlson99.schedule.Event.Action
	14, // 17: github.com.acarlson99.schedule.Event.schedule:type_name -> github.com.acarlson99.schedule.Event.Schedule
	5,  // 18: github.com.acarlson99.schedule.Event.devices:type_name -> github.com.acarlson99.schedule.DeviceIdentifier
	11, // 19: github.com.acarlson99.schedule.Event.start_if:type_name -> github.com.acarlson99.schedule.Comparison
	13, // 20: github.com.acarlson99.schedule.Event.Schedule.daily:type_name -> github.com.acarlson99.schedule.TimeOfDay
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_Automate_proto_init() }
func file_Automate_proto_init() {
	if File_Automate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Automate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Primitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Var); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeOfDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Automate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Automate_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DeviceIdentifier_Name)(nil),
	}
	file_Automate_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Primitive_Int32)(nil),
		(*Primitive_Float)(nil),
		(*Primitive_String_)(nil),
		(*Primitive_Bool)(nil),
	}
	file_Automate_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Var_Prim)(nil),
		(*Var_DeviceState)(nil),
		(*Var_BinOp)(nil),
		(*Var_UnaryOp)(nil),
		(*Var_Cmp)(nil),
	}
	file_Automate_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Event_Schedule_Daily)(nil),
		(*Event_Schedule_Crontab)(nil),
	}
	file_Automate_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Event_Action_On)(nil),
		(*Event_Action_ColorTemp)(nil),
		(*Event_Action_Brightness)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Automate_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Automate_proto_goTypes,
		DependencyIndexes: file_Automate_proto_depIdxs,
		EnumInfos:         file_Automate_proto_enumTypes,
		MessageInfos:      file_Automate_proto_msgTypes,
	}.Build()
	File_Automate_proto = out.File
	file_Automate_proto_rawDesc = nil
	file_Automate_proto_goTypes = nil
	file_Automate_proto_depIdxs = nil
}
